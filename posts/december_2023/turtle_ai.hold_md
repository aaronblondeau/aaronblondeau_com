import { CohereClient } from "cohere-ai";

const cohere = new CohereClient({
  token: "RnGXIyQuWGY9Uo2Hza17QFGN0bmLrWxWUgSptdHY", // This is your trial API key
});

(async () => {
  const response = await cohere.generate({
    model: "command",
    prompt: "Your job is to output JavaScript code that fulfills requests to create drawings.\nYou draw by moving a turtle around a canvas that is 400 pixels wide, and 400 pixels tall.\n\nYou have at your disposal the following JavaScript functions to operate the turtle:\n- forward(steps: int) : moves the turtle forward the given number of pixels\n- left(degrees: int) : turns turtle to the left the given number of degrees\n- right(degrees: int) : turns turtle to the right the given number of degrees\n- goto(x: int, y: int) : moves the turtle to x,y coordinates without drawing a line\n- penup() : disables drawing for the following commands\n- pendown() : enables drawing for the following commands\n- width(thickness: int) : sets the thickness of the pen\n- color(code_or_name: string) : sets the pen color to either a color name or a hex color code\n- done() : indicate to the user that you are done fulfilling their request\n\nYou can only write code that consists of calls to these functions.  You may also use for loops.\nIf the request does not specify a width use 4.\nIf the request does not specify a color use red.\nDo not draw outside the bounds of the canvas.\nDo not provide any explanation or reasons for the code.\nYour only output should be the code itself.\nYour drawing code must always end with the done() command.\n\nHere is the request:\nPlease draw a blue triangle with a base of 100px and a height of 200px.",
    maxTokens: 300,
    temperature: 0.9,
    k: 0,
    stopSequences: ["done()\n```", "done();\n```"],
    returnLikelihoods: "NONE"
  });
  console.log(`Prediction: ${response.generations[0].text}`);
})();









import OpenAI from "openai";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const response = await openai.chat.completions.create({
  model: "gpt-4",
  messages: [
    {
      "role": "system",
      "content": "Your job is to output JavaScript code that fulfills requests to create drawings.\nYou are an artistic assistant who draws by moving a pen around a canvas that is 400 pixels wide, and 400 pixels tall.\n\nYou have at your disposal the following JavaScript functions to operate the pen:\n- forward(steps: int) : moves the pen forward the given number of pixels\n- left(degrees: int) : turns oen to the left the given number of degrees\n- right(degrees: int) : turns pen to the right the given number of degrees\n- goto(x: int, y: int) : moves the pen to x,y coordinates without drawing a line\n- penup() : disables drawing for later commands\n- pendown() : enables drawing for later commands\n- width(thickness: int) : sets the thickness of the pen\n- color(code_or_name: string) : sets the pen color to either a color name or a hex color code\n- done() : indicate to the user that you are done fulfilling their request\n\nYou can only write code that consists of calls to these functions.  You may also use for loops.\nIf the request does not specify a width use 4. Always set a width.\nIf the request does not specify a color use red. Always set a color.\nDo not draw outside the bounds of the canvas.\nDo not provide any explanation or reasons for the code.\nYour only output should be the code itself.\nYour drawing code must always end with the done() command."
    },
    {
      "role": "user",
      "content": "Draw a smiley face."
    },
    {
      "role": "assistant",
      "content": "```\n// Set default values\ncolor('yellow');\nwidth(4);\n\n// Draw a circle as face\ngoto(200, 200);\npendown();\nfor (let i = 0; i < 360; i++) {\n  forward(1);\n  right(1);\n}\npenup();\n\n// Draw the left eye\ngoto(150, 150);\ncolor('black');\npendown();\nfor (let i = 0; i < 360; i++) {\n  forward(0.3);\n  right(1);\n}\npenup();\n\n// Draw the right eye\ngoto(250, 150);\npendown();\nfor (let i = 0; i < 360; i++) {\n  forward(0.3);\n  right(1);\n}\npenup();\n\n// Draw the smile\ngoto(150, 250);\npendown();\nfor (let i = 0; i < 180; i++) {\n  forward(1);\n  right(1);\n}\n\n"
    }
  ],
  temperature: 1,
  max_tokens: 256,
  top_p: 1,
  frequency_penalty: 0,
  presence_penalty: 0,
  stop: ["done()", "done();"],
});